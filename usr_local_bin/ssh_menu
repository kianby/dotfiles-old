#!/bin/bash
 
#Add your commands to this list
cmdlist=(
        #Command#  #Description#
        "ls  -la"  "List Files."
        "free -m"  "Show free ram."
        "df  -ih"  "Show free inodes."
        "df   -h"  "Show free disk space."
        "top -n1"  "Show summary system information."
        ""         ""
    "info"     "Full system info."
    "copy"     "Copy selected file or dir."
        "sshkey"   "Add my ssh key to this server."
        "alias"    "Add my usefull aliases to this server."
)
#------------------------{ Check if dialog installed }---------------------------------------------
dialog &> /dev/null || { if [ $(uname -s) == "Darwin" ]; then
                            # Use `brew install` if MacOS Detected
                            printf "\nInstall dialog\nbrew install -y dialog"
                         else
                            printf "\nInstall dialog\nsudo apt-get install -y dialog"
                         fi
                         exit 1; }
 
#------------------------{ Add some colors }---------------------------------------------
case $TERM in *term*)
#--------------------------------------------------------------------+
#Color picker, usage: printf ${BLD}${CUR}${RED}${BBLU}"Hello!)"${DEF}|
#-------------------------+--------------------------------+---------+
#       Text color        |       Background color         |         |
#-----------+-------------+--------------+-----------------+         |
# Base color|Lighter shade|  Base color  | Lighter shade   |         |
#-----------+-------------+--------------+-----------------+         |
BLK='\e[30m'; blk='\e[90m'; BBLK='\e[40m'; bblk='\e[100m' #| Black   |
RED='\e[31m'; red='\e[91m'; BRED='\e[41m'; bred='\e[101m' #| Red     |
GRN='\e[32m'; grn='\e[92m'; BGRN='\e[42m'; bgrn='\e[102m' #| Green   |
YLW='\e[33m'; ylw='\e[93m'; BYLW='\e[43m'; bylw='\e[103m' #| Yellow  |
BLU='\e[34m'; blu='\e[94m'; BBLU='\e[44m'; bblu='\e[104m' #| Blue    |
MGN='\e[35m'; mgn='\e[95m'; BMGN='\e[45m'; bmgn='\e[105m' #| Magenta |
CYN='\e[36m'; cyn='\e[96m'; BCYN='\e[46m'; bcyn='\e[106m' #| Cyan    |
WHT='\e[37m'; wht='\e[97m'; BWHT='\e[47m'; bwht='\e[107m' #| White   |
#----------------------------------------------------------+---------+
# Effects                                                            |
#--------------------------------------------------------------------+
DEF='\e[0m'   #Default color and effects                             |
BLD='\e[1m'   #Bold\brighter                                         |
DIM='\e[2m'   #Dim\darker                                            |
CUR='\e[3m'   #Italic font                                           |
UND='\e[4m'   #Underline                                             |
INV='\e[7m'   #Inverted                                              |
COF='\e[?25l' #Cursor Off                                            |
CON='\e[?25h' #Cursor On                                             |
#--------------------------------------------------------------------+
# Text positioning, usage: XY 10 10 "Hello World!"                   |
XY   () { printf "\e[${2};${1}H${3}";   } #                          |
#--------------------------------------------------------------------+
# Print line, usage: line - 10 | line -= 20 | line "Hello World!" 20 |
line () { printf %.s"${1}" $(seq ${2}); } #                          |
#--------------------------------------------------------------------+
;; esac
 
#------------------------{ Pause function }--------------------------------------------------------
function pause {
    printf "\n${BLD}"
    read -p 'press any key to continue'
    printf "\n${DEF}"
}
 
#------------------------{ System Info commands }--------------------------------------------------
function system_info {
    clear
    ssh $target "
        printf '\n${BLD}Hostname:${DEF}\n'
        hostname
 
        printf '\n${BLD}Interfaces:${DEF}\n'
        ip a | grep 'inet ' | sed '/127.0.0.1/d; s/.*inet //g; s|/.*$||g'
 
        printf '\n${BLD}Memory:${DEF}\n'
        LANG=Us free --si -h
 
        printf '\n${BLD}CPU:${DEF}\n'
        lscpu
 
        printf '\n${BLD}Disk:${DEF}\n'
        df -h; echo; df -ih; echo; lsblk
 
        printf '\n${BLD}Software:${DEF}\n'
        uname -a; echo
        [[ -e /usr/bin/lsb_release ]] && { lsb_release -a; echo; }
        [[ -e /usr/bin/java        ]] && { java  -version; echo; }
        [[ -e /usr/bin/psql        ]] && { psql  -V      ; echo; }
        [[ -e /usr/sbin/nginx      ]] && { nginx -v      ; echo; }
 
        printf '${BLD}Logged in Users:${DEF}\n'
        who
 
        printf '\n${BLD}Port usage info:${DEF}\n'
        netstat -tulpn 2> /dev/null
 
        printf '\n${BLD}Processes:${DEF}\n'
        top -bcn1 | head -n30
    "
    pause
}
 
#------------------------{ Copy selected file to server }------------------------------------------
function copy_files {
    filename=$(dialog --output-fd 1 --aspect 100 --colors --fselect ./ 10 80)
    scp -r $filename $target:~
}
 
#------------------------{ Yes to ssh }------------------------------------------------------------
function ssh_yes () {
# If connecting first time send 'yes' on ssh's request.
# Expect must be installed on server. Options:
#   $1 - ssh address with parameters(if needed)
#
# Usage example:
#   ssh_yes "-p22 user@localhost"
expect << EOF
spawn ssh $1
expect {
    "(yes/no)?" {
        send "yes\n"
        expect {
            "assword:" { exit }
            "$ "       { send "exit\n" }
        }
    }
    "assword:" { exit }
    "$ "       { send "exit\n" }
}
exit
EOF
}
 
#------------------------{ Add ssh key }-----------------------------------------------------------
function add_sshkey { clear; ssh_yes $target > /dev/null; ssh-copy-id $target; }
 
#------------------------{ Add aliases }-----------------------------------------------------------
function add_aliases { clear; scp ~/.bash_aliases $target:~; }
 
#------------------------{Run command }------------------------------------------------------------
function run_command { clear; ssh -t $target $command; sleep 3; }
 
#------------------------{ Exit function }---------------------------------------------------------
function bye { clear; if [ $(uname -s) == "Darwin" ]; then ls -G; else ls --color=auto; fi; exit 0; }; trap bye INT
 
#------------------------{ First dialog - Select host }--------------------------------------------
function first_dialog {
        target=$(dialog --output-fd 1 \
                                        --extra-button --extra-label "RUN COMMAND" \
                                        --ok-label "CONNECT" --cancel-label "EXIT" \
                                        --menu "Select host to connect to:" 0 0 0 "${list[@]}")
        case $target:$? in
                 *:0) clear; ssh $target;;
                 *:3) second_dialog;;
                "":*) bye;;
        esac
}
 
#------------------------{ Second dialog - Select command }----------------------------------------
function second_dialog {
        command=$(dialog --output-fd 1 --ok-label "RUN" --cancel-label "BACK" \
                     --extra-button --extra-label "CONNECT" --colors --aspect 100 \
                     --menu "Select command to run on host \"\Z4$target\Z0\":" 0 0 0 "${cmdlist[@]}")
 
        case $? in 3) clear; ssh $target; second_dialog;; esac
 
        case $command in
                "sshkey") add_sshkey  ; second_dialog;;
                "alias" ) add_aliases ; second_dialog;;
        "info"  ) system_info ; second_dialog;;
        "copy"  ) copy_files  ; second_dialog;;
                ""      ) first_dialog;;
                *       ) run_command ; second_dialog;;
        esac
}
 
#-------------{ Create hosts list. Get hosts and descriptions from ~/.ssh/config. }----------------
IFSOLD=$IFS; IFS=$'\n'; for host in $(grep -h "Host " ~/.ssh/config* | sed '/\*/d; s/Host //g;'); do
 
    name="${host// #*/}" # Get HostName
    desc="${host//*#/}"  # Get Description
 
    case $name in
 
        '#DUMMY') desc="${host%\#*}"; desc="${desc##*\#}"
                  name="{ $desc }"; line=$[ (40-${#name})/2 ]
                  name=$(printf %.s- $(seq $line); printf "$name"; printf %.s- $(seq $line))
                  [[ ${#name} -lt 40 ]] && name=-$name; desc=$(printf %.s- $(seq 20));;
 
    esac
 
    list+=( "$name" "$desc" ) #Add HostName and Description to the list
 
done; IFS=$IFSOLD
 
#--{ Go baby, GO!) }--
first_dialog
#; bye
